{"version":3,"file":"app.min.js","sources":["../src/config.js","../src/index.mjs"],"sourcesContent":["/**\n * @file index.js\n * @author Dino <dinoabsoluto+dev@gmail.com>\n * @license\n * This file is part of translator-js.\n *\n * translator-js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * translator-js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with translator-js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n/* config */\nconst config = {\n  version: require('../package.json').version,\n  sourceDir: __dirname\n}\n\nmodule.exports = config\n","/**\n * @file index.mjs\n * @author Dino <dinoabsoluto+dev@gmail.com>\n * @license\n * This file is part of translator-js.\n *\n * translator-js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * translator-js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with translator-js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n/* imports */\nimport chalk from 'chalk'\nimport info from './config.js'\nimport yargs from 'yargs'\nimport globby from 'globby'\nimport path from 'path'\n/* -imports */\n\nconst report = (error) => {\n  console.error(chalk`{red ${report.stack ? error.stack : error}}`)\n  if (report.pedantic) {\n    process.exit(-1)\n  }\n}\nreport.pedantic = true\n\nconst _postParse = (config) => {\n  report.stack = !!config.stack\n  report.pedantic = !!config.pedantic\n}\n\nconst _glob = async (config) => {\n  if (config.sources && config.sources.length) {\n    return\n  }\n  let indexes = await globby(path.join(config.output, '*/index.json'))\n  config.sources = indexes.map(fpath => path.dirname(fpath))\n}\n\nconst _get = async (config) => {\n  const getEngine = await import('./get')\n  let output = config.output || './download/'\n  for (const source of config.sources) {\n    try {\n      let engine = getEngine({\n        source,\n        verbose: true,\n        chdir: output,\n        overwrite: config.force\n      })\n      await engine.refresh()\n    } catch (error) {\n      report(error)\n    }\n  }\n}\n\nconst cmdGet = async (config) => {\n  await _postParse(config)\n  await _glob(config)\n  await _get(config)\n}\n\nconst _parseArgs = async () => {\n  return yargs.strict(true)\n    .usage('$0 get [--output=<path>] [options] [<URL> | <path>..]')\n    .help('help').alias('help', 'h')\n    .version(info.version)\n    .group([ 'help', 'version' ], 'Info:')\n    .option('stack', {\n      hidden: true,\n      default: false,\n      type: 'boolean'\n    })\n    .option('output', {\n      alias: ['o'],\n      default: 'download',\n      type: 'string',\n      desc: 'Output directory'\n    })\n    .option('force', {\n      alias: ['f'],\n      default: false,\n      type: 'boolean',\n      desc: 'Overwrite untracked files'\n    })\n    .option('pedantic', {\n      default: true,\n      type: 'boolean',\n      desc: 'Exit on first error'\n    })\n    .command(\n      'get [<sources>..]',\n      'Get RAWs',\n      yargs => yargs.strict()\n        .usage('$0 get [--output=<path>] [options] [<URL> | <path>..]')\n        .argv,\n      cmdGet\n    )\n    .demandCommand(1)\n    .fail(err => {\n      yargs.showHelp()\n      report(err)\n    })\n    .argv\n}\n\n/**\n * Main function\n */\nconst _main = async () => {\n  await _parseArgs()\n}\n\n_main().catch(report)\n"],"names":["config","version","require$$0","sourceDir","__dirname","report","error","console","chalk","stack","pedantic","process","exit","_postParse","_glob","async","sources","length","indexes","globby","path","join","output","map","fpath","dirname","_get","getEngine","Promise","source","engine","verbose","chdir","overwrite","force","refresh","cmdGet","_parseArgs","yargs","strict","usage","help","alias","info","group","option","hidden","default","type","desc","command","argv","demandCommand","fail","err","showHelp","_main","catch"],"mappings":"g9EAqBA,MAAMA,OAAS,CACbC,QAASC,WAA2BD,QACpCE,UAAWC,WAGb,aAAiBJ,OCEjB,MAAMK,OAAUC,IACdC,QAAQD,MAAME,aAAaH,OAAOI,MAAQH,EAAMG,MAAQH,MACpDD,OAAOK,UACTC,QAAQC,MAAM,IAGlBP,OAAOK,UAAW,EAElB,MAAMG,WAAcb,IAClBK,OAAOI,QAAUT,EAAOS,MACxBJ,OAAOK,WAAaV,EAAOU,UAGvBI,MAAQC,MAAAA,OACRf,EAAOgB,SAAWhB,EAAOgB,QAAQC,kBAGjCC,QAAgBC,OAAOC,KAAKC,KAAKrB,EAAOsB,OAAQ,iBACpDtB,EAAOgB,QAAUE,EAAQK,IAAIC,GAASJ,KAAKK,QAAQD,KAG/CE,KAAOX,MAAAA,UACLY,QAAkBC,wBAAO,sBAC3BN,EAAStB,EAAOsB,QAAU,kBACzB,MAAMO,KAAU7B,EAAOgB,gBAEpBc,EAASH,EAAU,CACrBE,OAAAA,EACAE,SAAS,EACTC,MAAOV,EACPW,UAAWjC,EAAOkC,cAEdJ,EAAOK,UACb,MAAO7B,GACPD,OAAOC,KAKP8B,OAASrB,MAAAA,UACPF,WAAWb,SACXc,MAAMd,SACN0B,KAAK1B,IAGPqC,WAAatB,SACVuB,MAAMC,QAAO,GACjBC,MAAM,yDACNC,KAAK,QAAQC,MAAM,OAAQ,KAC3BzC,QAAQ0C,SAAK1C,SACb2C,MAAM,CAAE,OAAQ,WAAa,SAC7BC,OAAO,QAAS,CACfC,QAAQ,EACRC,SAAS,EACTC,KAAM,YAEPH,OAAO,SAAU,CAChBH,MAAO,CAAC,KACRK,QAAS,WACTC,KAAM,SACNC,KAAM,qBAEPJ,OAAO,QAAS,CACfH,MAAO,CAAC,KACRK,SAAS,EACTC,KAAM,UACNC,KAAM,8BAEPJ,OAAO,WAAY,CAClBE,SAAS,EACTC,KAAM,UACNC,KAAM,wBAEPC,QACC,oBACA,WACAZ,GAASA,EAAMC,SACZC,MAAM,yDACNW,KACHf,QAEDgB,cAAc,GACdC,KAAKC,IACJhB,MAAMiB,WACNlD,OAAOiD,KAERH,KAMCK,MAAQzC,gBACNsB,cAGRmB,QAAQC,MAAMpD"}