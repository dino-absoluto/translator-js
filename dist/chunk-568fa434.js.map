{"version":3,"file":"chunk-568fa434.js","sources":["../src/get/utils/hash.mjs","../src/get/utils/get-external.mjs"],"sourcesContent":["/**\n * @file Get module\n * @author Dino <dinoabsoluto+dev@gmail.com>\n * @license\n * This file is part of translator-js.\n *\n * translator-js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * translator-js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with translator-js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n/* imports */\nimport crypto from 'crypto'\n/* -imports */\n\nconst hash = (buffer) => {\n  const integrity = crypto.createHash('sha256')\n    .update(buffer, 'utf8')\n    .digest('base64')\n  return integrity\n}\n\nexport default hash\n","/**\n * @file Get module\n * @author Dino <dinoabsoluto+dev@gmail.com>\n * @license\n * This file is part of translator-js.\n *\n * translator-js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * translator-js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with translator-js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n/* imports */\nimport got from 'got'\nimport mime from 'mime-types'\n/* -imports */\n\nconst getExternal = async ({\n  prefix, oldFiles, files, urls\n}) => {\n  const offset = files.length\n  let promises = urls.map(async (url, index) => {\n    const get = async () => {\n      let { body: content, headers } = await got(url, { encoding: null })\n      let fname = `${\n        prefix\n      } image ${\n        String(index + 1).padStart(2, '0')\n      }.${\n        mime.extension(headers['content-type']) || 'jpg'\n      }`\n      return { content, fname }\n    }\n    let old = oldFiles && oldFiles[index + offset]\n    if (old && old.fname && old.integrity && old.integrity === url) {\n      return {\n        fname: old.fname,\n        integrity: url,\n        buffer: async () => {\n          return (await get()).content\n        }\n      }\n    }\n    let { fname, content } = await get()\n    return {\n      fname,\n      integrity: url,\n      buffer: content\n    }\n  })\n  let datas = await Promise.all(promises)\n  for (const info of datas) {\n    files.push(info)\n  }\n}\n\nexport default getExternal\n"],"names":["hash","buffer","crypto","createHash","update","digest","getExternal","async","prefix","oldFiles","files","urls","offset","length","promises","map","url","index","get","body","content","headers","got","encoding","fname","String","padStart","mime","extension","old","integrity","datas","Promise","all","info","push"],"mappings":"+NAwBA,MAAMA,KAAQC,WACMC,OAAOC,WAAW,UACjCC,OAAOH,EAAQ,QACfI,OAAO,WCFNC,YAAcC,OAClBC,OAAAA,EAAQC,SAAAA,EAAUC,MAAAA,EAAOC,KAAAA,YAEnBC,EAASF,EAAMG,WACjBC,EAAWH,EAAKI,IAAIR,MAAOS,EAAKC,WAC5BC,EAAMX,cACJY,KAAMC,EAARC,QAAiBA,SAAkBC,IAAIN,EAAK,CAAEO,SAAU,aAQrD,CAAEH,QAAAA,EAASI,SANhBhB,WAEAiB,OAAOR,EAAQ,GAAGS,SAAS,EAAG,QAE9BC,KAAKC,UAAUP,EAAQ,kBAAoB,cAI3CQ,EAAMpB,GAAYA,EAASQ,EAAQL,MACnCiB,GAAOA,EAAIL,OAASK,EAAIC,WAAaD,EAAIC,YAAcd,QAClD,CACLQ,MAAOK,EAAIL,MACXM,UAAWd,EACXf,OAAQM,gBACQW,KAAOE,aAIvBI,MAAEA,EAAFJ,QAASA,SAAkBF,UACxB,CACLM,MAAAA,EACAM,UAAWd,EACXf,OAAQmB,KAGRW,QAAcC,QAAQC,IAAInB,OACzB,MAAMoB,KAAQH,EACjBrB,EAAMyB,KAAKD"}