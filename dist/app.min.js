"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var chalk=_interopDefault(require("chalk")),yargs=_interopDefault(require("yargs")),path=_interopDefault(require("path")),version="4.0.0",info={version:version};const report=e=>{console.error(chalk`{red ${report.stack?e.stack:e}}`),report.pedantic&&process.exit(-1)};report.pedantic=!0;const _postParse=e=>{report.stack=!!e.stack,report.pedantic=!!e.pedantic},_glob=async e=>{const t=await Promise.resolve(require("globby"));if(e.sources&&e.sources.length)return;let r=await t(path.join(e.output,"*/index.json"));e.sources=r.map(e=>path.dirname(e))},_get=async e=>{const t=(await Promise.resolve(require("./chunk-8e140871.js"))).default;let r=e.output||"./download/";for(const o of e.sources)try{let a=await t({source:o,verbose:!0,chdir:r,overwrite:e.force});await a.refresh()}catch(e){report(e)}},cmdGet=async e=>{await _postParse(e),await _glob(e),await _get(e)},_parseArgs=async()=>yargs.strict(!0).usage("$0 get [--output=<path>] [options] [<URL> | <path>..]").help("help").alias("help","h").version(info.version).group(["help","version"],"Info:").option("stack",{hidden:!0,default:!1,type:"boolean"}).option("output",{alias:["o"],default:"download",type:"string",desc:"Output directory"}).option("force",{alias:["f"],default:!1,type:"boolean",desc:"Overwrite untracked files"}).option("pedantic",{default:!0,type:"boolean",desc:"Exit on first error"}).command("get [<sources>..]","Get RAWs",e=>e.strict().usage("$0 get [--output=<path>] [options] [<URL> | <path>..]").argv,cmdGet).demandCommand(1).fail(e=>{yargs.showHelp(),report(e)}).argv,_main=async()=>{await _parseArgs()};_main().catch(report);
//# sourceMappingURL=app.min.js.map
